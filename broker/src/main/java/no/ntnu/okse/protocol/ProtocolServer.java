/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Norwegian Defence Research Establishment / NTNU
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package no.ntnu.okse.protocol;

import no.ntnu.okse.core.messaging.Message;

public interface ProtocolServer {

    class BootErrorException extends RuntimeException {
        public BootErrorException(String message) {
            super(message);
        }
    }

    String getHost();

    int getPort();

    /**
     * This interface method must return the total amount of requests the protocol server has handled.
     *
     * @return An integer representing the total amount of requests handled.
     */
    int getTotalRequests();

    /**
     * This interface method must return the total amount of messages that has been processed by the
     * protocol server.
     *
     * @return An integer representing the total amount of sent messages.
     */
    int getTotalMessagesSent();

    /**
     * This interface method must return the total amount of messages that has been received by the protocol server.
     *
     * @return An integer representing the total amount of received messages.
     */
    int getTotalMessagesReceived();

    /**
     * This interface method must return the total amount of bad requests received by the protocol server.
     *
     * @return An integer representing the total amount of received malformed or bad requests
     */
    int getTotalBadRequests();

    /**
     * This interface method must return the total amount of errors generated by the protocol server.
     *
     * @return An integer representing the total amount of errors in the protocol server.
     */
    int getTotalErrors();

    /**
     * This interface method must implement a complete initialization and startup process of a protocol server.
     * As it is used in the Core Service to fire up all registered protocol servers upon application start.
     */
    void boot();

    /**
     * This interface method should contain the main run loop initialization
     */
    void run();

    /**
     * This interface method must implement a complete shutdown procedure of the protocol server.
     */
    void stopServer();

    /**
     * This interface method must return a string with the name of the protocol for which the protocol server
     * is responsible for handling.
     *
     * @return A string representing the name of the protocol in question.
     */
    String getProtocolServerType();

    /**
     * This interface method must take in an instance of Message, which contains the appropriate references
     * and flags needed to distribute the message to consumers. Implementation specific details can vary from
     * protocol to protocol, but the end result of a method call to sendMessage is that the message is delivered,
     * or an error is logged.
     *
     * @param message An instance of Message containing the required data to distribute a message.
     */
    void sendMessage(Message message);
}
